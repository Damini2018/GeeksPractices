#include <stdio.h>
#include <stdlib.h>

struct node
{
	int data;
	struct node *left;
	struct node *right;
	struct node *nextRight;
};


node* getNeighbourChild(node *node){
    while(node){
        if(node->left)
            return node->left;
        if(node->right)
            return node->right;
        node = node->nextRight ;
    }
    return node;
}
void connect(struct node *p)
{
   // Your Code Here
   // if Node is Leaf or empty tree (Base case)
   if(p==NULL || (p->left==NULL && p->right==NULL))
        return ;
        
    // if Root has both children
    if(p->left!=NULL && p->right!=NULL){
        p->left->nextRight = p->right;
        p->right->nextRight = getNeighbourChild(p->nextRight);
    }
    // If root has left Child
    else if(p->left!=NULL){
        p->left->nextRight = getNeighbourChild(p->nextRight);
    }
    // If root has Right Child
    else {
        p->right->nextRight = getNeighbourChild(p->nextRight);
    }
    connect(p->right);
    connect(p->left);
}


/* UTILITY FUNCTIONS */
/* Helper function that allocates a new node with the
given data and NULL left and right pointers. */
struct node* newnode(int data)
{
	struct node* node = (struct node*)
						malloc(sizeof(struct node));
	node->data = data;
	node->left = NULL;
	node->right = NULL;
	node->nextRight = NULL;

	return(node);
}

/* Driver program to test above functions*/
int main()
{

	/* Constructed binary tree is
			10
			/ \
		8	 2
		/		 \
	3		 90
	*/
	struct node *root = newnode(10);
	root->left	 = newnode(8);
	root->right	 = newnode(2);
	root->left->left = newnode(3);
	root->right->right	 = newnode(90);

	// Populates nextRight pointer in all nodes
	connect(root);

	// Let us check the values of nextRight pointers
	printf("Following are populated nextRight pointers in the tree "
		"(-1 is printed if there is no nextRight) \n");
	printf("nextRight of %d is %d \n", root->data,
		root->nextRight? root->nextRight->data: -1);
	printf("nextRight of %d is %d \n", root->left->data,
		root->left->nextRight? root->left->nextRight->data: -1);
	printf("nextRight of %d is %d \n", root->right->data,
		root->right->nextRight? root->right->nextRight->data: -1);
	printf("nextRight of %d is %d \n", root->left->left->data,
		root->left->left->nextRight? root->left->left->nextRight->data: -1);
	printf("nextRight of %d is %d \n", root->right->right->data,
		root->right->right->nextRight? root->right->right->nextRight->data: -1);

	getchar();
	return 0;
}
#include <stdio.h>
#include <stdlib.h>

struct node
{
	int data;
	struct node *left;
	struct node *right;
	struct node *nextRight;
};


node* getNeighbourChild(node *node){
    while(node){
        if(node->left)
            return node->left;
        if(node->right)
            return node->right;
        node = node->nextRight ;
    }
    return node;
}
void connect(struct node *p)
{
   // Your Code Here
   // if Node is Leaf or empty tree (Base case)
   if(p==NULL || (p->left==NULL && p->right==NULL))
        return ;
        
    // if Root has both children
    if(p->left!=NULL && p->right!=NULL){
        p->left->nextRight = p->right;
        p->right->nextRight = getNeighbourChild(p->nextRight);
    }
    // If root has left Child
    else if(p->left!=NULL){
        p->left->nextRight = getNeighbourChild(p->nextRight);
    }
    // If root has Right Child
    else {
        p->right->nextRight = getNeighbourChild(p->nextRight);
    }
    connect(p->right);
    connect(p->left);
}


/* UTILITY FUNCTIONS */
/* Helper function that allocates a new node with the
given data and NULL left and right pointers. */
struct node* newnode(int data)
{
	struct node* node = (struct node*)
						malloc(sizeof(struct node));
	node->data = data;
	node->left = NULL;
	node->right = NULL;
	node->nextRight = NULL;

	return(node);
}

/* Driver program to test above functions*/
int main()
{

	/* Constructed binary tree is
			10
			/ \
		8	 2
		/		 \
	3		 90
	*/
	struct node *root = newnode(10);
	root->left	 = newnode(8);
	root->right	 = newnode(2);
	root->left->left = newnode(3);
	root->right->right	 = newnode(90);

	// Populates nextRight pointer in all nodes
	connect(root);

	// Let us check the values of nextRight pointers
	printf("Following are populated nextRight pointers in the tree "
		"(-1 is printed if there is no nextRight) \n");
	printf("nextRight of %d is %d \n", root->data,
		root->nextRight? root->nextRight->data: -1);
	printf("nextRight of %d is %d \n", root->left->data,
		root->left->nextRight? root->left->nextRight->data: -1);
	printf("nextRight of %d is %d \n", root->right->data,
		root->right->nextRight? root->right->nextRight->data: -1);
	printf("nextRight of %d is %d \n", root->left->left->data,
		root->left->left->nextRight? root->left->left->nextRight->data: -1);
	printf("nextRight of %d is %d \n", root->right->right->data,
		root->right->right->nextRight? root->right->right->nextRight->data: -1);

	getchar();
	return 0;
}
